{"prompt": "def is_json_serializable(val):", "metadata": {"task_id": "Text-Processing/python-benedict/0", "ground_truth": "    json_types = (type(None), bool, dict, float, int, list, str, tuple)\n    return isinstance(val, json_types)", "fpath_tuple": ["Text-Processing", "python-benedict", "benedict", "utils", "type_util.py"], "context_start_lineno": 52, "line_no": 53, "id": "benedict.utils.type_util.is_json_serializable", "target_function_prompt": "def is_json_serializable(val):", "function_signature": "def is_json_serializable(val):"}}
{"prompt": "def convert_to_idn(url):", "metadata": {"task_id": "Text-Processing/feedparser/0", "ground_truth": "    parts = list(urllib.parse.urlsplit(url))\n    try:\n        parts[1].encode('ascii')\n    except UnicodeEncodeError:\n        # the url needs to be converted to idn notation\n        host = parts[1].rsplit(':', 1)\n        newhost = []\n        port = ''\n        if len(host) == 2:\n            port = host.pop()\n        for h in host[0].split('.'):\n            newhost.append(h.encode('idna').decode('utf-8'))\n        parts[1] = '.'.join(newhost)\n        if port:\n            parts[1] += ':' + port\n        return urllib.parse.urlunsplit(parts)\n    else:\n        return url", "fpath_tuple": ["Text-Processing", "feedparser", "feedparser", "urls.py"], "context_start_lineno": 60, "line_no": 65, "id": "feedparser.urls.convert_to_idn", "target_function_prompt": "def convert_to_idn(url):", "function_signature": "def convert_to_idn(url):"}}